{"version":3,"sources":["index.js"],"names":["tf","threshold","_callee","model","C_Users_YapWeiJie_Downloads_RustTest_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","loadGraphModel","sent","abrupt","stop","classesDir","1","name","id","2","App","videoRef","React","createRef","canvasRef","detectFrame","video","startScope","executeAsync","_this","process_input","then","predictions","renderPredictions","requestAnimationFrame","endScope","ctx","current","getContext","clearRect","canvas","width","height","font","textBaseline","boxes","arraySync","scores","classes","dataSync","detections","buildDetectedObjects","forEach","item","x","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","toFixed","textHeight","parseInt","fillRect","fillText","_this2","this","navigator","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","ideal","stream","window","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","load_model","all","values","catch","error","console","video_frame","fromPixels","toInt","transpose","expandDims","detectionObjects","document","getElementById","score","i","bbox","minY","offsetHeight","minX","offsetWidth","maxY","maxX","push","class","label","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","style","className","autoPlay","playsInline","muted","ref","Component","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.aa94fde8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport {loadGraphModel} from '@tensorflow/tfjs-converter';\r\nimport \"./styles.css\";\r\ntf.setBackend('webgl');\r\n\r\nconst threshold = 0.1;\r\n\r\nasync function load_model() {\r\n    // It's possible to load the model locally or from a repo\r\n    // You can choose whatever IP and PORT you want in the \"http://127.0.0.1:8080/model.json\" just set it before in your https server\r\n    // const model = await loadGraphModel(\"http://192.168.0.168:8080/model.json\");\r\n    const model = await loadGraphModel(\"https://raw.githubusercontent.com/weijie0216/RustTest/main/models/best_web_model/model.json\");\r\n    return model;\r\n  }\r\n\r\nlet classesDir = {\r\n    1: {\r\n        name: 'Rust',\r\n        id: 1,\r\n    },\r\n    2: {\r\n        name: 'Other',\r\n        id: 2,\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n  videoRef = React.createRef();\r\n  canvasRef = React.createRef();\r\n\r\n  componentDidMount() {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      const webCamPromise = navigator.mediaDevices\r\n        .getUserMedia({\r\n          audio: false,\r\n          video: {\r\n            facingMode: {\r\n              ideal: \"environment\"\r\n            }\r\n          }\r\n        })\r\n        .then(stream => {\r\n          window.stream = stream;\r\n          this.videoRef.current.srcObject = stream;\r\n          return new Promise((resolve, reject) => {\r\n            this.videoRef.current.onloadedmetadata = () => {\r\n              resolve();\r\n            };\r\n          });\r\n        });\r\n\r\n      const modelPromise = load_model();\r\n\r\n      Promise.all([modelPromise, webCamPromise])\r\n        .then(values => {\r\n          this.detectFrame(this.videoRef.current, values[0]);\r\n        })\r\n        .catch(error => {\r\n          console.error(error);\r\n        });\r\n    }\r\n  }\r\n\r\n    detectFrame = (video, model) => {\r\n        tf.engine().startScope();\r\n        // video = video.reshape([1,480,640,3])\r\n        model.executeAsync(this.process_input(video)).then(predictions => {\r\n        this.renderPredictions(predictions, video);\r\n        requestAnimationFrame(() => {\r\n          this.detectFrame(video, model);\r\n        });\r\n        tf.engine().endScope();\r\n      });\r\n  };\r\n\r\n  process_input(video_frame){\r\n    const tfimg = tf.browser.fromPixels(video_frame).toInt();\r\n    const expandedimg = tfimg.transpose([0,1,2]).expandDims();\r\n    return expandedimg;\r\n  };\r\n\r\n  buildDetectedObjects(scores, threshold, boxes, classes, classesDir) {\r\n    const detectionObjects = []\r\n    var video_frame = document.getElementById('frame');\r\n\r\n    scores[0].forEach((score, i) => {\r\n      if (score > threshold) {\r\n        const bbox = [];\r\n        const minY = boxes[0][i][0] * video_frame.offsetHeight;\r\n        const minX = boxes[0][i][1] * video_frame.offsetWidth;\r\n        const maxY = boxes[0][i][2] * video_frame.offsetHeight;\r\n        const maxX = boxes[0][i][3] * video_frame.offsetWidth;\r\n        bbox[0] = minX;\r\n        bbox[1] = minY;\r\n        bbox[2] = maxX - minX;\r\n        bbox[3] = maxY - minY;\r\n        detectionObjects.push({\r\n          class: classes[i],\r\n          label: classesDir[classes[i]].name,\r\n          score: score.toFixed(4),\r\n          bbox: bbox\r\n        })\r\n      }\r\n    })\r\n    return detectionObjects\r\n  }\r\n\r\n  renderPredictions = predictions => {\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    \r\n    // Font options.\r\n    const font = \"16px sans-serif\";\r\n    ctx.font = font;\r\n    ctx.textBaseline = \"top\";\r\n\r\n    //Getting predictions\r\n    const boxes = predictions[4].arraySync();\r\n    const scores = predictions[5].arraySync();\r\n    const classes = predictions[6].dataSync();\r\n    const detections = this.buildDetectedObjects(scores, threshold,\r\n                                    boxes, classes, classesDir);\r\n\r\n    detections.forEach(item => {\r\n      const x = item['bbox'][0];\r\n      const y = item['bbox'][1];\r\n      const width = item['bbox'][2];\r\n      const height = item['bbox'][3];\r\n\r\n      // Draw the bounding box.\r\n      ctx.strokeStyle = \"#00FFFF\";\r\n      ctx.lineWidth = 4;\r\n      ctx.strokeRect(x, y, width, height);\r\n\r\n      // Draw the label background.\r\n      ctx.fillStyle = \"#00FFFF\";\r\n      const textWidth = ctx.measureText(item[\"label\"] + \" \" + (100 * item[\"score\"]).toFixed(2) + \"%\").width;\r\n      const textHeight = parseInt(font, 10); // base 10\r\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\r\n    });\r\n\r\n    detections.forEach(item => {\r\n      const x = item['bbox'][0];\r\n      const y = item['bbox'][1];\r\n\r\n      // Draw the text last to ensure it's on top.\r\n      ctx.fillStyle = \"#000000\";\r\n      ctx.fillText(item[\"label\"] + \" \" + (100*item[\"score\"]).toFixed(2) + \"%\", x, y);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Real-Time Object Detection: Rust</h1>\r\n        <h3>MobileNetV2</h3>\r\n        <video\r\n          style={{height: '600px', width: \"500px\"}}\r\n          className=\"size\"\r\n          autoPlay\r\n          playsInline\r\n          muted\r\n          ref={this.videoRef}\r\n          width=\"600\"\r\n          height=\"500\"\r\n          id=\"frame\"\r\n        />\r\n        <canvas\r\n          className=\"size\"\r\n          ref={this.canvasRef}\r\n          width=\"600\"\r\n          height=\"500\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}